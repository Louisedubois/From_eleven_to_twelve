{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Temps de parole. ipynb","provenance":[],"authorship_tag":"ABX9TyPzPREgIYdQZlWtwOvsKGFo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"XBXkoEuRh9Sv","executionInfo":{"status":"ok","timestamp":1650702533071,"user_tz":-120,"elapsed":2221,"user":{"displayName":"louise dubois","userId":"10817704515917279507"}}},"outputs":[],"source":["import pandas as pd \n","import plotly.express as px"]},{"cell_type":"markdown","source":["À partir des sorties du modèle cette fonction calcule le temps de parole de chaque locuteur "],"metadata":{"id":"7ZHZOrE5ip_B"}},{"cell_type":"code","source":["def get_tmps(df) : \n","    voice_count=df.speaker.unique()\n","    temps= pd.DataFrame(columns=['Locuteur','Temps de parole'])\n","    k=0\n","    for i in voice_count : \n","      data=df.where(df.speaker==i)\n","      data['temps']=data['end']-data['start']\n","      temps=temps.append({'Temps de parole': data['temps'].sum()},ignore_index=True)\n","      temps.iloc[k,0]=i\n","      k=k+1\n","    fig = px.pie(temps,values='Temps de parole', names='Locuteur',title='Distribution du temps de parole',width=700, height=300)\n","    fig=fig.update_traces(textinfo=\"percent+label\")\n","    fig.show()\n","    return temps"],"metadata":{"id":"v9Z3ArkjiB_m","executionInfo":{"status":"ok","timestamp":1650702538025,"user_tz":-120,"elapsed":235,"user":{"displayName":"louise dubois","userId":"10817704515917279507"}}},"execution_count":2,"outputs":[]}]}